// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum status {
  PENDING
  APPROVED
  REJECTED
}

model Booking {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  bookingStartDate String
  bookingEndDate   String

  status String @default("PENDING")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  petId  String
  pet    Pets   @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([petId])
}

model Pets {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  type        String
  breed       String?
  gender      String?
  age         String?
  weight      String?
  desexed     Boolean   @default(false)
  vaccinated  Boolean   @default(false)
  temperament String?
  image       String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]

  @@index([userId])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

enum Role {
  ADMIN
  COMPANYADMIN
  COMPANYUSER
  CLIENT
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique @map("email")
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("CLIENT")
  pets          Pets[]
  bookings      Booking[]
  accounts      Account[]
  sessions      Session[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
